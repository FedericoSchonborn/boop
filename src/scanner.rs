use std::str::Chars;

use crate::token::Token;

#[derive(Debug, Clone)]
pub struct Scanner<'a> {
    chars: Chars<'a>,
}

impl<'a> Scanner<'a> {
    #[must_use]
    pub fn new(source: &'a str) -> Self {
        Self {
            chars: source.chars(),
        }
    }
}

impl<'a> Iterator for Scanner<'a> {
    type Item = Token;

    fn next(&mut self) -> Option<Self::Item> {
        Some(match self.chars.next()? {
            'ðŸ˜¾' => Token::Left,
            'ðŸ˜º' => Token::Right,
            'ðŸ˜¸' => Token::Plus,
            'ðŸ˜¿' => Token::Minus,
            'ðŸ˜¼' => Token::Input,
            'ðŸ˜½' => Token::Output,
            'ðŸ˜»' => Token::Loop,
            'ðŸ™€' => Token::Break,
            'ðŸ’©' => Token::Dump,
            'ðŸ‘‰' => Token::Boop,
            _ => return self.next(),
        })
    }
}
